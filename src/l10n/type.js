// @flow
// eslint-disable
// WARNING: THIS FILE IS AUTOGENERATED BY update_type.sh
export type Translation = {
  global: {
    language: {
      chineseSimplified: string,
      chineseTraditional: string,
      english: string,
      japanese: string,
      korean: string,
    },
    datetime: {
      today: string,
      yesterday: string,
    },
  },
  LoginScreen: {
    title: string,
  },
  LanguagePicker: {
    selectLanguage: string,
    continue: string,
  },
  TxHistoryListItem: {
    transactionType: {
      SENT: string,
      RECEIVED: string,
      SELF: string,
      MULTI: string,
    },
    assuranceLevelHeader: string,
    assuranceLevel: {
      LOW: string,
      MEDIUM: string,
      HIGH: string,
      PENDING: string,
      FAILED: string,
    },
  },
  TxDetails: {
    fromAddresses: string,
    toAddresses: string,
    transactionId: string,
    txAssuranceLevel: string,
    transactionHeader: {
      SENT: string,
      RECEIVED: string,
      SELF: string,
      MULTI: string,
    },
    formatConfirmations: (cnt: any) => string,
  },
  TxNavigationButtons: {
    sendButton: string,
    receiveButton: string,
  },
  SendScreen: {
    funds: string,
    scanCode: string,
    address: string,
    amount: string,
    continue: string,
    checkingBalance: string,
    availableAmount: string,
    validationErrors: {
      invalidAddress: string,
      positiveAmount: string,
      insufficientBalance: string,
      amountErrorByErrorCode: (code: any) => string,
    },
    fetchingError: string,
  },
  ConfirmScreen: {
    confirm: string,
    amount: string,
    availableFunds: string,
    balanceAfterTx: string,
    fees: string,
    password: string,
    receiver: string,
  },
  WalletInitScreen: {
    createWallet: string,
    restoreWallet: string,
  },
  WalletDescription: {
    line1: string,
    line2: string,
    byEmurgo: string,
  },
  CreateWalletScreen: {
    title: string,
    nameLabel: string,
    passwordLabel: string,
    passwordConfirmationLabel: string,
    passwordRequirementsNote: string,
    passwordMinLength: string,
    passwordUpperChar: string,
    passwordLowerChar: string,
    passwordNumber: string,
    createButton: string,
  },
  ChangeWalletName: {
    walletName: string,
    changeButtonText: string,
    walletValidationText: string,
  },
  ReceiveScreen: {
    title: string,
    description: {
      line1: string,
      line2: string,
      line3: string,
    },
  },
  AddressDetail: {
    walletAddress: string,
  },
  AddressesList: {
    walletAddresses: string,
    hideUsedAddresses: string,
    showUsedAddresses: string,
  },
  AddressModal: {
    BIP32path: string,
    copyLabel: string,
    copiedLabel: string,
  },
  RecoveryPhraseConfirmationDialog: {
    title: string,
    keysStorageCheckbox: string,
    newDeviceRecoveryCheckbox: string,
    confirmationButton: string,
  },
  RecoveryPhraseConfirmationScreen: {
    title: string,
    instructions: string,
    inputLabel: string,
    invalidPhrase: string,
    clearButton: string,
    confirmButton: string,
  },
  RecoveryPhraseExplanationDialog: {
    title: string,
    paragraph1: string,
    paragraph2: string,
    nextButton: string,
  },
  RecoveryPhraseScreen: {
    title: string,
    mnemonicNote: string,
    confirmationButton: string,
  },
  RestoreWalletScreen: {
    title: string,
    instructions: string,
    phrase: string,
    restoreButton: string,
    errors: {
      maxLength: string,
      unknownWords: (words: any) => string,
    },
  },
  SettingsScreen: {
    title: string,
    walletName: string,
    edit: string,
    privacy: string,
    changePin: string,
    changePassword: string,
    fingerprintSignIn: string,
    easyConfirmation: string,
    downloadLogs: string,
    downloadLogsText: string,
    removeWallet: string,
    language: string,
    termsOfUse: string,
    support: string,
  },
  SupportScreen: {
    title: string,
    faq: {
      label: string,
      description: string,
      url: string,
    },
    report: {
      label: string,
      description: string,
      url: string,
    },
  },
  TermsOfServiceScreen: {
    title: string,
    content: Array<any>,
  },
  setLanguage: (lang: string) => void,
}
